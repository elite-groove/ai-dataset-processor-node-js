{"javascript":"(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :\n    typeof define === 'function' && define.amd ? define(['exports'], factory) :\n    (global = global || self, factory(global.countUp = {}));\n}(this, (function (exports) { 'use strict';\n\n    var __assign = (undefined && undefined.__assign) || function () {\n        __assign = Object.assign || function(t) {\n            for (var s, i = 1, n = arguments.length; i < n; i++) {\n                s = arguments[i];\n                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                    t[p] = s[p];\n            }\n            return t;\n        };\n        return __assign.apply(this, arguments);\n    };\n    // playground: stackblitz.com/edit/countup-typescript\n    var CountUp = /** @class */ (function () {\n        function CountUp(target, endVal, options) {\n            var _this = this;\n            this.target = target;\n            this.endVal = endVal;\n            this.options = options;\n            this.version = '2.0.7';\n            this.defaults = {\n                startVal: 0,\n                decimalPlaces: 0,\n                duration: 2,\n                useEasing: true,\n                useGrouping: true,\n                smartEasingThreshold: 999,\n                smartEasingAmount: 333,\n                separator: ',',\n                decimal: '.',\n                prefix: '',\n                suffix: ''\n            };\n            this.finalEndVal = null; // for smart easing\n            this.useEasing = true;\n            this.countDown = false;\n            this.error = '';\n            this.startVal = 0;\n            this.paused = true;\n            this.count = function (timestamp) {\n                if (!_this.startTime) {\n                    _this.startTime = timestamp;\n                }\n                var progress = timestamp - _this.startTime;\n                _this.remaining = _this.duration - progress;\n                // to ease or not to ease\n                if (_this.useEasing) {\n                    if (_this.countDown) {\n                        _this.frameVal = _this.startVal - _this.easingFn(progress, 0, _this.startVal - _this.endVal, _this.duration);\n                    }\n                    else {\n                        _this.frameVal = _this.easingFn(progress, _this.startVal, _this.endVal - _this.startVal, _this.duration);\n                    }\n                }\n                else {\n                    if (_this.countDown) {\n                        _this.frameVal = _this.startVal - ((_this.startVal - _this.endVal) * (progress / _this.duration));\n                    }\n                    else {\n                        _this.frameVal = _this.startVal + (_this.endVal - _this.startVal) * (progress / _this.duration);\n                    }\n                }\n                // don't go past endVal since progress can exceed duration in the last frame\n                if (_this.countDown) {\n                    _this.frameVal = (_this.frameVal < _this.endVal) ? _this.endVal : _this.frameVal;\n                }\n                else {\n                    _this.frameVal = (_this.frameVal > _this.endVal) ? _this.endVal : _this.frameVal;\n                }\n                // decimal\n                _this.frameVal = Number(_this.frameVal.toFixed(_this.options.decimalPlaces));\n                // format and print value\n                _this.printValue(_this.frameVal);\n                // whether to continue\n                if (progress < _this.duration) {\n                    _this.rAF = requestAnimationFrame(_this.count);\n                }\n                else if (_this.finalEndVal !== null) {\n                    // smart easing\n                    _this.update(_this.finalEndVal);\n                }\n                else {\n                    if (_this.callback) {\n                        _this.callback();\n                    }\n                }\n            };\n            // default format and easing functions\n            this.formatNumber = function (num) {\n                var neg = (num < 0) ? '-' : '';\n                var result, x, x1, x2, x3;\n                result = Math.abs(num).toFixed(_this.options.decimalPlaces);\n                result += '';\n                x = result.split('.');\n                x1 = x[0];\n                x2 = x.length > 1 ? _this.options.decimal + x[1] : '';\n                if (_this.options.useGrouping) {\n                    x3 = '';\n                    for (var i = 0, len = x1.length; i < len; ++i) {\n                        if (i !== 0 && (i % 3) === 0) {\n                            x3 = _this.options.separator + x3;\n                        }\n                        x3 = x1[len - i - 1] + x3;\n                    }\n                    x1 = x3;\n                }\n                // optional numeral substitution\n                if (_this.options.numerals && _this.options.numerals.length) {\n                    x1 = x1.replace(/[0-9]/g, function (w) { return _this.options.numerals[+w]; });\n                    x2 = x2.replace(/[0-9]/g, function (w) { return _this.options.numerals[+w]; });\n                }\n                return neg + _this.options.prefix + x1 + x2 + _this.options.suffix;\n            };\n            this.easeOutExpo = function (t, b, c, d) {\n                return c * (-Math.pow(2, -10 * t / d) + 1) * 1024 / 1023 + b;\n            };\n            this.options = __assign(__assign({}, this.defaults), options);\n            this.formattingFn = (this.options.formattingFn) ?\n                this.options.formattingFn : this.formatNumber;\n            this.easingFn = (this.options.easingFn) ?\n                this.options.easingFn : this.easeOutExpo;\n            this.startVal = this.validateValue(this.options.startVal);\n            this.frameVal = this.startVal;\n            this.endVal = this.validateValue(endVal);\n            this.options.decimalPlaces = Math.max( this.options.decimalPlaces);\n            this.resetDuration();\n            this.options.separator = String(this.options.separator);\n            this.useEasing = this.options.useEasing;\n            if (this.options.separator === '') {\n                this.options.useGrouping = false;\n            }\n            this.el = (typeof target === 'string') ? document.getElementById(target) : target;\n            if (this.el) {\n                this.printValue(this.startVal);\n            }\n            else {\n                this.error = '[CountUp] target is null or undefined';\n            }\n        }\n        // determines where easing starts and whether to count down or up\n        CountUp.prototype.determineDirectionAndSmartEasing = function () {\n            var end = (this.finalEndVal) ? this.finalEndVal : this.endVal;\n            this.countDown = (this.startVal > end);\n            var animateAmount = end - this.startVal;\n            if (Math.abs(animateAmount) > this.options.smartEasingThreshold) {\n                this.finalEndVal = end;\n                var up = (this.countDown) ? 1 : -1;\n                this.endVal = end + (up * this.options.smartEasingAmount);\n                this.duration = this.duration / 2;\n            }\n            else {\n                this.endVal = end;\n                this.finalEndVal = null;\n            }\n            if (this.finalEndVal) {\n                this.useEasing = false;\n            }\n            else {\n                this.useEasing = this.options.useEasing;\n            }\n        };\n        // start animation\n        CountUp.prototype.start = function (callback) {\n            if (this.error) {\n                return;\n            }\n            this.callback = callback;\n            if (this.duration > 0) {\n                this.determineDirectionAndSmartEasing();\n                this.paused = false;\n                this.rAF = requestAnimationFrame(this.count);\n            }\n            else {\n                this.printValue(this.endVal);\n            }\n        };\n        // pause/resume animation\n        CountUp.prototype.pauseResume = function () {\n            if (!this.paused) {\n                cancelAnimationFrame(this.rAF);\n            }\n            else {\n                this.startTime = null;\n                this.duration = this.remaining;\n                this.startVal = this.frameVal;\n                this.determineDirectionAndSmartEasing();\n                this.rAF = requestAnimationFrame(this.count);\n            }\n            this.paused = !this.paused;\n        };\n        // reset to startVal so animation can be run again\n        CountUp.prototype.reset = function () {\n            cancelAnimationFrame(this.rAF);\n            this.paused = true;\n            this.resetDuration();\n            this.startVal = this.validateValue(this.options.startVal);\n            this.frameVal = this.startVal;\n            this.printValue(this.startVal);\n        };\n        // pass a new endVal and start animation\n        CountUp.prototype.update = function (newEndVal) {\n            cancelAnimationFrame(this.rAF);\n            this.startTime = null;\n            this.endVal = this.validateValue(newEndVal);\n            if (this.endVal === this.frameVal) {\n                return;\n            }\n            this.startVal = this.frameVal;\n            if (!this.finalEndVal) {\n                this.resetDuration();\n            }\n            this.finalEndVal = null;\n            this.determineDirectionAndSmartEasing();\n            this.rAF = requestAnimationFrame(this.count);\n        };\n        CountUp.prototype.printValue = function (val) {\n            var result = this.formattingFn(val);\n            if (this.el.tagName === 'INPUT') {\n                var input = this.el;\n                input.value = result;\n            }\n            else if (this.el.tagName === 'text' || this.el.tagName === 'tspan') {\n                this.el.textContent = result;\n            }\n            else {\n                this.el.innerHTML = result;\n            }\n        };\n        CountUp.prototype.ensureNumber = function (n) {\n            return (typeof n === 'number' && !isNaN(n));\n        };\n        CountUp.prototype.validateValue = function (value) {\n            var newValue = Number(value);\n            if (!this.ensureNumber(newValue)) {\n                this.error = \"[CountUp] invalid start or end value: \" + value;\n                return null;\n            }\n            else {\n                return newValue;\n            }\n        };\n        CountUp.prototype.resetDuration = function () {\n            this.startTime = null;\n            this.duration = Number(this.options.duration) * 1000;\n            this.remaining = this.duration;\n        };\n        return CountUp;\n    }());\n\n    exports.CountUp = CountUp;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n})));\n","css":"","html":"","input":"css","output":["[4[47"]}