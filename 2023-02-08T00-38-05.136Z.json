{"javascript":"var BigPicture = (function () {\n\t// BigPicture.js | license MIT | henrygd.me/bigpicture\n\n\t// trigger element used to open popup\n\tvar el;\n\n\t// set to true after first interaction\n\tvar initialized;\n\n\t// container element holding html needed for script\n\tvar container;\n\n\t// currently active display element (image, video, youtube / vimeo iframe container)\n\tvar displayElement;\n\n\t// popup image element\n\tvar displayImage;\n\n\t// popup video element\n\tvar displayVideo;\n\n\t// popup audio element\n\tvar displayAudio;\n\n\t// container element to hold youtube / vimeo iframe\n\tvar iframeContainer;\n\n\t// iframe to hold youtube / vimeo player\n\tvar iframeSiteVid;\n\n\t// store requested image source\n\tvar imgSrc;\n\n\t// button that closes the container\n\tvar closeButton;\n\n\t// youtube / vimeo video id\n\tvar siteVidID;\n\n\t// keeps track of loading icon display state\n\tvar isLoading;\n\n\t// timeout to check video status while loading\n\tvar checkMediaTimeout;\n\n\t// loading icon element\n\tvar loadingIcon;\n\n\t// caption element\n\tvar caption;\n\n\t// caption content element\n\tvar captionText;\n\n\t// store caption content\n\tvar captionContent;\n\n\t// hide caption button element\n\tvar captionHideButton;\n\n\t// open state for container element\n\tvar isOpen;\n\n\t// gallery open state\n\tvar galleryOpen;\n\n\t// used during close animation to avoid triggering timeout twice\n\tvar isClosing;\n\n\t// array of prev viewed image urls to check if cached before showing loading icon\n\tvar imgCache = [];\n\n\t// store whether image requested is remote or local\n\tvar remoteImage;\n\n\t// store animation opening callbacks\n\tvar animationStart;\n\tvar animationEnd;\n\n\t// store changeGalleryImage callback\n\tvar onChangeImage;\n\n\t// gallery left / right icons\n\tvar rightArrowBtn;\n\n\tvar leftArrowBtn;\n\n\t// position of gallery\n\tvar galleryPosition;\n\n\t// hold active gallery els / image src\n\tvar galleryEls;\n\n\t// counter element\n\tvar galleryCounter;\n\n\t// store images in gallery that are being loaded\n\tvar preloadedImages = {};\n\n\t// whether device supports touch events\n\tvar supportsTouch;\n\n\t// options object\n\tvar opts;\n\n\t// Save bytes in the minified version\n\tvar appendEl = 'appendChild';\n\tvar createEl = 'createElement';\n\tvar removeEl = 'removeChild';\n\n\tfunction BigPicture (options) {\n\t\t// initialize called on initial open to create elements / style / event handlers\n\t\tinitialized || initialize();\n\n\t\t// clear currently loading stuff\n\t\tif (isLoading) {\n\t\t\tclearTimeout(checkMediaTimeout);\n\t\t\tremoveContainer();\n\t\t}\n\n\t\topts = options;\n\n\t\t// store video id if youtube / vimeo video is requested\n\t\tsiteVidID = options.ytSrc || options.vimeoSrc;\n\n\t\t// store optional callbacks\n\t\tanimationStart = options.animationStart;\n\t\tanimationEnd = options.animationEnd;\n\t\tonChangeImage = options.onChangeImage;\n\n\t\t// set trigger element\n\t\tel = options.el;\n\n\t\t// wipe existing remoteImage state\n\t\tremoteImage = false;\n\n\t\t// set caption if provided\n\t\tcaptionContent = el.getAttribute('data-caption');\n\n\t\tif (options.gallery) {\n\t\t\tmakeGallery(options.gallery, options.position);\n\t\t} else if (siteVidID || options.iframeSrc) {\n\t\t\t// if vimeo, youtube, or iframe video\n\t\t\t// toggleLoadingIcon(true)\n\t\t\tdisplayElement = iframeContainer;\n\t\t\tcreateIframe();\n\t\t} else if (options.imgSrc) {\n\t\t\t// if remote image\n\t\t\tremoteImage = true;\n\t\t\timgSrc = options.imgSrc;\n\t\t\t!~imgCache.indexOf(imgSrc) && toggleLoadingIcon(true);\n\t\t\tdisplayElement = displayImage;\n\t\t\tdisplayElement.src = imgSrc;\n\t\t} else if (options.audio) {\n\t\t\t// if direct video link\n\t\t\ttoggleLoadingIcon(true);\n\t\t\tdisplayElement = displayAudio;\n\t\t\tdisplayElement.src = options.audio;\n\t\t\tcheckMedia('audio file');\n\t\t} else if (options.vidSrc) {\n\t\t\t// if direct video link\n\t\t\ttoggleLoadingIcon(true);\n\t\t\tif (options.dimensions) {\n\t\t\t\tchangeCSS(displayVideo, (\"width:\" + (options.dimensions[0]) + \"px\"));\n\t\t\t}\n\t\t\tmakeVidSrc(options.vidSrc);\n\t\t\tcheckMedia('video');\n\t\t} else {\n\t\t\t// local image / background image already loaded on page\n\t\t\tdisplayElement = displayImage;\n\t\t\t// get img source or element background image\n\t\t\tdisplayElement.src =\n\t\t\t\tel.tagName === 'IMG'\n\t\t\t\t\t? el.src\n\t\t\t\t\t: window\n\t\t\t\t\t\t\t.getComputedStyle(el)\n\t\t\t\t\t\t\t.backgroundImage.replace(/^url|[(|)|'|\"]/g, '');\n\t\t}\n\n\t\t// add container to page\n\t\tcontainer[appendEl](displayElement);\n\t\tdocument.body[appendEl](container);\n\t\treturn {\n\t\t\tclose: close,\n\t\t\tnext: function () { return updateGallery(1); },\n\t\t\tprev: function () { return updateGallery(-1); },\n\t\t}\n\t}\n\n\t// create all needed methods / store dom elements on first use\n\tfunction initialize() {\n\t\tvar startX;\n\t\t// return close button elements\n\t\tfunction createCloseButton(className) {\n\t\t\tvar el = document[createEl]('button');\n\t\t\tel.className = className;\n\t\t\tel.innerHTML =\n\t\t\t\t'<svg viewBox=\"0 0 48 48\"><path d=\"M28 24L47 5a3 3 0 1 0-4-4L24 20 5 1a3 3 0 1 0-4 4l19 19L1 43a3 3 0 1 0 4 4l19-19 19 19a3 3 0 0 0 4 0v-4L28 24z\"/></svg>';\n\t\t\treturn el\n\t\t}\n\n\t\tfunction createArrowSymbol(direction, style) {\n\t\t\tvar el = document[createEl]('button');\n\t\t\tel.className = 'bp-lr';\n\t\t\tel.innerHTML =\n\t\t\t\t'<svg viewBox=\"0 0 129 129\" height=\"70\" fill=\"#fff\"><path d=\"M88.6 121.3c.8.8 1.8 1.2 2.9 1.2s2.1-.4 2.9-1.2a4.1 4.1 0 0 0 0-5.8l-51-51 51-51a4.1 4.1 0 0 0-5.8-5.8l-54 53.9a4.1 4.1 0 0 0 0 5.8l54 53.9z\"/></svg>';\n\t\t\tchangeCSS(el, style);\n\t\t\tel.onclick = function (e) {\n\t\t\t\te.stopPropagation();\n\t\t\t\tupdateGallery(direction);\n\t\t\t};\n\t\t\treturn el\n\t\t}\n\n\t\t// add style - if you want to tweak, run through beautifier\n\t\tvar style = document[createEl]('STYLE');\n\t\tstyle.innerHTML =\n\t\t\t'#bp_caption,#bp_container{bottom:0;left:0;right:0;position:fixed;opacity:0}#bp_container>*,#bp_loader{position:absolute;right:0;z-index:10}#bp_container,#bp_caption,#bp_container svg{pointer-events:none}#bp_container{top:0;z-index:9999;background:rgba(0,0,0,.7);opacity:0;transition:opacity .35s}#bp_loader{top:0;left:0;bottom:0;display:flex;align-items:center;cursor:wait;background:0;z-index:9}#bp_loader svg{width:50%;max-width:300px;max-height:50%;margin:auto;animation:bpturn 1s infinite linear}#bp_aud,#bp_container img,#bp_sv,#bp_vid{user-select:none;max-height:96%;max-width:96%;top:0;bottom:0;left:0;margin:auto;box-shadow:0 0 3em rgba(0,0,0,.4);z-index:-1}#bp_sv{background:#111}#bp_sv svg{width:66px}#bp_caption{font-size:.9em;padding:1.3em;background:rgba(15,15,15,.94);color:#fff;text-align:center;transition:opacity .3s}#bp_aud{width:650px;top:calc(50% - 20px);bottom:auto;box-shadow:none}#bp_count{left:0;right:auto;padding:14px;color:rgba(255,255,255,.7);font-size:22px;cursor:default}#bp_container button{position:absolute;border:0;outline:0;background:0;cursor:pointer;transition:all .1s}#bp_container>.bp-x{padding:0;height:41px;width:41px;border-radius:100%;top:8px;right:14px;opacity:.8;line-height:1}#bp_container>.bp-x:focus,#bp_container>.bp-x:hover{background:rgba(255,255,255,.2)}.bp-x svg,.bp-xc svg{height:21px;width:20px;fill:#fff;vertical-align:top;}.bp-xc svg{width:16px}#bp_container .bp-xc{left:2%;bottom:100%;padding:9px 20px 7px;background:#d04444;border-radius:2px 2px 0 0;opacity:.85}#bp_container .bp-xc:focus,#bp_container .bp-xc:hover{opacity:1}.bp-lr{top:50%;top:calc(50% - 130px);padding:99px 0;width:6%;background:0;border:0;opacity:.4;transition:opacity .1s}.bp-lr:focus,.bp-lr:hover{opacity:.8}@keyframes bpf{50%{transform:translatex(15px)}100%{transform:none}}@keyframes bpl{50%{transform:translatex(-15px)}100%{transform:none}}@keyframes bpfl{0%{opacity:0;transform:translatex(70px)}100%{opacity:1;transform:none}}@keyframes bpfr{0%{opacity:0;transform:translatex(-70px)}100%{opacity:1;transform:none}}@keyframes bpfol{0%{opacity:1;transform:none}100%{opacity:0;transform:translatex(-70px)}}@keyframes bpfor{0%{opacity:1;transform:none}100%{opacity:0;transform:translatex(70px)}}@keyframes bpturn{0%{transform:none}100%{transform:rotate(360deg)}}@media (max-width:600px){.bp-lr{font-size:15vw}}';\n\t\tdocument.head[appendEl](style);\n\n\t\t// create container element\n\t\tcontainer = document[createEl]('DIV');\n\t\tcontainer.id = 'bp_container';\n\t\tcontainer.onclick = close;\n\t\tcloseButton = createCloseButton('bp-x');\n\t\tcontainer[appendEl](closeButton);\n\t\t// gallery swipe listeners\n\t\tif ('ontouchstart' in window) {\n\t\t\tsupportsTouch = true;\n\t\t\tcontainer.ontouchstart = function (ref) {\n\t\t\t\tvar changedTouches = ref.changedTouches;\n\n\t\t\t\tstartX = changedTouches[0].pageX;\n\t\t\t};\n\t\t\tcontainer.ontouchmove = function (e) {\n\t\t\t\te.preventDefault();\n\t\t\t};\n\t\t\tcontainer.ontouchend = function (ref) {\n\t\t\t\tvar changedTouches = ref.changedTouches;\n\n\t\t\t\tif (!galleryOpen) {\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t\tvar distX = changedTouches[0].pageX - startX;\n\t\t\t\t// swipe right\n\t\t\t\tdistX < -30 && updateGallery(1);\n\t\t\t\t// swipe left\n\t\t\t\tdistX > 30 && updateGallery(-1);\n\t\t\t};\n\t\t}\n\n\t\t// create display image element\n\t\tdisplayImage = document[createEl]('IMG');\n\n\t\t// create display video element\n\t\tdisplayVideo = document[createEl]('VIDEO');\n\t\tdisplayVideo.id = 'bp_vid';\n\t\tdisplayVideo.setAttribute('playsinline', true);\n\t\tdisplayVideo.controls = true;\n\t\tdisplayVideo.loop = true;\n\n\t\t// create audio element\n\t\tdisplayAudio = document[createEl]('audio');\n\t\tdisplayAudio.id = 'bp_aud';\n\t\tdisplayAudio.controls = true;\n\t\tdisplayAudio.loop = true;\n\n\t\t// create gallery counter\n\t\tgalleryCounter = document[createEl]('span');\n\t\tgalleryCounter.id = 'bp_count';\n\n\t\t// create caption elements\n\t\tcaption = document[createEl]('DIV');\n\t\tcaption.id = 'bp_caption';\n\t\tcaptionHideButton = createCloseButton('bp-xc');\n\t\tcaptionHideButton.onclick = toggleCaption.bind(null, false);\n\t\tcaption[appendEl](captionHideButton);\n\t\tcaptionText = document[createEl]('SPAN');\n\t\tcaption[appendEl](captionText);\n\t\tcontainer[appendEl](caption);\n\n\t\t// left / right arrow icons\n\t\trightArrowBtn = createArrowSymbol(1, 'transform:scalex(-1)');\n\t\tleftArrowBtn = createArrowSymbol(-1, 'left:0;right:auto');\n\n\t\t// create loading icon element\n\t\tloadingIcon = document[createEl]('DIV');\n\t\tloadingIcon.id = 'bp_loader';\n\t\tloadingIcon.innerHTML =\n\t\t\t'<svg viewbox=\"0 0 32 32\" fill=\"#fff\" opacity=\".8\"><path d=\"M16 0a16 16 0 0 0 0 32 16 16 0 0 0 0-32m0 4a12 12 0 0 1 0 24 12 12 0 0 1 0-24\" fill=\"#000\" opacity=\".5\"/><path d=\"M16 0a16 16 0 0 1 16 16h-4A12 12 0 0 0 16 4z\"/></svg>';\n\t\t// create youtube / vimeo container\n\t\tiframeContainer = document[createEl]('DIV');\n\t\tiframeContainer.id = 'bp_sv';\n\n\t\t// create iframe to hold youtube / vimeo player\n\t\tiframeSiteVid = document[createEl]('IFRAME');\n\t\tiframeSiteVid.setAttribute('allowfullscreen', true);\n\t\tiframeSiteVid.allow = 'autoplay; fullscreen';\n\t\tiframeSiteVid.onload = function () { return iframeContainer[removeEl](loadingIcon); };\n\t\tchangeCSS(\n\t\t\tiframeSiteVid,\n\t\t\t'border:0;position:absolute;height:100%;width:100%;left:0;top:0'\n\t\t);\n\t\tiframeContainer[appendEl](iframeSiteVid);\n\n\t\t// display image bindings for image load and error\n\t\tdisplayImage.onload = open;\n\t\tdisplayImage.onerror = open.bind(null, 'image');\n\n\t\twindow.addEventListener('resize', function () {\n\t\t\t// adjust loader position on window resize\n\t\t\tgalleryOpen || (isLoading && toggleLoadingIcon(true));\n\t\t\t// adjust iframe dimensions\n\t\t\tdisplayElement === iframeContainer && updateIframeDimensions();\n\t\t});\n\n\t\t// close container on escape key press and arrow buttons for gallery\n\t\tdocument.addEventListener('keyup', function (ref) {\n\t\t\tvar keyCode = ref.keyCode;\n\n\t\t\tkeyCode === 27 && isOpen && close();\n\t\t\tif (galleryOpen) {\n\t\t\t\tkeyCode === 39 && updateGallery(1);\n\t\t\t\tkeyCode === 37 && updateGallery(-1);\n\t\t\t\tkeyCode === 38 && updateGallery(10);\n\t\t\t\tkeyCode === 40 && updateGallery(-10);\n\t\t\t}\n\t\t});\n\t\t// prevent scrolling with arrow keys if gallery open\n\t\tdocument.addEventListener('keydown', function (e) {\n\t\t\tvar usedKeys = [37, 38, 39, 40];\n\t\t\tif (galleryOpen && ~usedKeys.indexOf(e.keyCode)) {\n\t\t\t\te.preventDefault();\n\t\t\t}\n\t\t});\n\n\t\t// trap focus within conainer while open\n\t\tdocument.addEventListener(\n\t\t\t'focus',\n\t\t\tfunction (e) {\n\t\t\t\tif (isOpen && !container.contains(e.target)) {\n\t\t\t\t\te.stopPropagation();\n\t\t\t\t\tcloseButton.focus();\n\t\t\t\t}\n\t\t\t},\n\t\t\ttrue\n\t\t);\n\n\t\t// all done\n\t\tinitialized = true;\n\t}\n\n\t// return transform style to make full size display el match trigger el size\n\tfunction getRect() {\n\t\tvar ref = el.getBoundingClientRect();\n\t\tvar top = ref.top;\n\t\tvar left = ref.left;\n\t\tvar width = ref.width;\n\t\tvar height = ref.height;\n\t\tvar leftOffset = left - (container.clientWidth - width) / 2;\n\t\tvar centerTop = top - (container.clientHeight - height) / 2;\n\t\tvar scaleWidth = el.clientWidth / displayElement.clientWidth;\n\t\tvar scaleHeight = el.clientHeight / displayElement.clientHeight;\n\t\treturn (\"transform:translate3D(\" + leftOffset + \"px, \" + centerTop + \"px, 0) scale3D(\" + scaleWidth + \", \" + scaleHeight + \", 0)\")\n\t}\n\n\tfunction makeVidSrc(source) {\n\t\tif (Array.isArray(source)) {\n\t\t\tdisplayElement = displayVideo.cloneNode();\n\t\t\tsource.forEach(function (src) {\n\t\t\t\tvar source = document[createEl]('SOURCE');\n\t\t\t\tsource.src = src;\n\t\t\t\tsource.type = \"video/\" + (src.match(/.(\\w+)$/)[1]);\n\t\t\t\tdisplayElement[appendEl](source);\n\t\t\t});\n\t\t} else {\n\t\t\tdisplayElement = displayVideo;\n\t\t\tdisplayElement.src = source;\n\t\t}\n\t}\n\n\tfunction makeGallery(gallery, position) {\n\t\tvar galleryAttribute = opts.galleryAttribute || 'data-bp';\n\t\tif (Array.isArray(gallery)) {\n\t\t\t// is array of images\n\t\t\tgalleryPosition = position || 0;\n\t\t\tgalleryEls = gallery;\n\t\t\tcaptionContent = gallery[galleryPosition].caption;\n\t\t} else {\n\t\t\t// is element selector or nodelist\n\t\t\tgalleryEls = [].slice.call(\n\t\t\t\ttypeof gallery === 'string'\n\t\t\t\t\t? document.querySelectorAll((gallery + \" [\" + galleryAttribute + \"]\"))\n\t\t\t\t\t: gallery\n\t\t\t);\n\t\t\t// find initial gallery position\n\t\t\tvar elIndex = galleryEls.indexOf(el);\n\t\t\tgalleryPosition =\n\t\t\t\tposition === 0 || position ? position : elIndex !== -1 ? elIndex : 0;\n\t\t\t// make gallery object w/ els / src / caption\n\t\t\tgalleryEls = galleryEls.map(function (el) { return ({\n\t\t\t\tel: el,\n\t\t\t\tsrc: el.getAttribute(galleryAttribute),\n\t\t\t\tcaption: el.getAttribute('data-caption'),\n\t\t\t}); });\n\t\t}\n\t\t// show loading icon if needed\n\t\tremoteImage = true;\n\t\t// set initial src to imgSrc so it will be cached in open func\n\t\timgSrc = galleryEls[galleryPosition].src;\n\t\t!~imgCache.indexOf(imgSrc) && toggleLoadingIcon(true);\n\t\tif (galleryEls.length > 1) {\n\t\t\t// if length is greater than one, add gallery stuff\n\t\t\tcontainer[appendEl](galleryCounter);\n\t\t\tgalleryCounter.innerHTML = (galleryPosition + 1) + \"/\" + (galleryEls.length);\n\t\t\tif (!supportsTouch) {\n\t\t\t\t// add arrows if device doesn't support touch\n\t\t\t\tcontainer[appendEl](rightArrowBtn);\n\t\t\t\tcontainer[appendEl](leftArrowBtn);\n\t\t\t}\n\t\t} else {\n\t\t\t// gallery is one, just show without clutter\n\t\t\tgalleryEls = false;\n\t\t}\n\t\tdisplayElement = displayImage;\n\t\t// set initial image src\n\t\tdisplayElement.src = imgSrc;\n\t}\n\n\tfunction updateGallery(movement) {\n\t\tvar galleryLength = galleryEls.length - 1;\n\n\t\t// only allow one change at a time\n\t\tif (isLoading) {\n\t\t\treturn\n\t\t}\n\n\t\t// return if requesting out of range image\n\t\tvar isEnd =\n\t\t\t(movement > 0 && galleryPosition === galleryLength) ||\n\t\t\t(movement < 0 && !galleryPosition);\n\t\tif (isEnd) {\n\t\t\t// if beginning or end of gallery, run end animation\n\t\t\tif (!opts.loop) {\n\t\t\t\tchangeCSS(displayImage, '');\n\t\t\t\tsetTimeout(\n\t\t\t\t\tchangeCSS,\n\t\t\t\t\t9,\n\t\t\t\t\tdisplayImage,\n\t\t\t\t\t(\"animation:\" + (movement > 0 ? 'bpl' : 'bpf') + \" .3s;transition:transform .35s\")\n\t\t\t\t);\n\t\t\t\treturn\n\t\t\t}\n\t\t\t// if gallery is looped, adjust position to beginning / end\n\t\t\tgalleryPosition = movement > 0 ? -1 : galleryLength + 1;\n\t\t}\n\n\t\t// normalize position\n\t\tgalleryPosition = Math.max(\n\t\t\t0,\n\t\t\tMath.min(galleryPosition + movement, galleryLength)\n\t\t)\n\n\t\t// load images before and after for quicker scrolling through pictures\n\t\t;[galleryPosition - 1, galleryPosition, galleryPosition + 1].forEach(\n\t\t\tfunction (position) {\n\t\t\t\t// normalize position\n\t\t\t\tposition = Math.max(0, Math.min(position, galleryLength));\n\t\t\t\t// cancel if image has already been preloaded\n\t\t\t\tif (preloadedImages[position]) { return }\n\t\t\t\tvar src = galleryEls[position].src;\n\t\t\t\t// create image for preloadedImages\n\t\t\t\tvar img = document[createEl]('IMG');\n\t\t\t\timg.addEventListener('load', addToImgCache.bind(null, src));\n\t\t\t\timg.src = src;\n\t\t\t\tpreloadedImages[position] = img;\n\t\t\t}\n\t\t);\n\t\t// if image is loaded, show it\n\t\tif (preloadedImages[galleryPosition].complete) {\n\t\t\treturn changeGalleryImage(movement)\n\t\t}\n\t\t// if not, show loading icon and change when loaded\n\t\tisLoading = true;\n\t\tchangeCSS(loadingIcon, 'opacity:.4;');\n\t\tcontainer[appendEl](loadingIcon);\n\t\tpreloadedImages[galleryPosition].onload = function () {\n\t\t\tgalleryOpen && changeGalleryImage(movement);\n\t\t};\n\t\t// if error, store error object in el array\n\t\tpreloadedImages[galleryPosition].onerror = function () {\n\t\t\tgalleryEls[galleryPosition] = {\n\t\t\t\terror: 'Error loading image',\n\t\t\t};\n\t\t\tgalleryOpen && changeGalleryImage(movement);\n\t\t};\n\t}\n\n\tfunction changeGalleryImage(movement) {\n\t\tif (isLoading) {\n\t\t\tcontainer[removeEl](loadingIcon);\n\t\t\tisLoading = false;\n\t\t}\n\t\tvar activeEl = galleryEls[galleryPosition];\n\t\tif (activeEl.error) {\n\t\t\t// show alert if error\n\t\t\talert(activeEl.error);\n\t\t} else {\n\t\t\t// add new image, animate images in and out w/ css animation\n\t\t\tvar oldimg = container.querySelector('img:last-of-type');\n\t\t\tdisplayImage = displayElement = preloadedImages[galleryPosition];\n\t\t\tchangeCSS(\n\t\t\t\tdisplayImage,\n\t\t\t\t(\"animation:\" + (movement > 0 ? 'bpfl' : 'bpfr') + \" .35s;transition:transform .35s\")\n\t\t\t);\n\t\t\tchangeCSS(oldimg, (\"animation:\" + (movement > 0 ? 'bpfol' : 'bpfor') + \" .35s both\"));\n\t\t\tcontainer[appendEl](displayImage);\n\t\t\t// update el for closing animation\n\t\t\tif (activeEl.el) {\n\t\t\t\tel = activeEl.el;\n\t\t\t}\n\t\t}\n\t\t// update counter\n\t\tgalleryCounter.innerHTML = (galleryPosition + 1) + \"/\" + (galleryEls.length);\n\t\t// show / hide caption\n\t\ttoggleCaption(galleryEls[galleryPosition].caption);\n\t\t// execute onChangeImage callback\n\t\tonChangeImage && onChangeImage([displayImage, galleryEls[galleryPosition]]);\n\t}\n\n\t// create video iframe\n\tfunction createIframe() {\n\t\tvar url;\n\t\tvar prefix = 'https://';\n\t\tvar suffix = 'autoplay=1';\n\n\t\t// create appropriate url\n\t\tif (opts.ytSrc) {\n\t\t\turl = prefix + \"www.youtube\" + (opts.ytNoCookie ? '-nocookie' : '') + \".com/embed/\" + siteVidID + \"?html5=1&rel=0&playsinline=1&\" + suffix;\n\t\t} else if (opts.vimeoSrc) {\n\t\t\turl = prefix + \"player.vimeo.com/video/\" + siteVidID + \"?\" + suffix;\n\t\t} else if (opts.iframeSrc) {\n\t\t\turl = opts.iframeSrc;\n\t\t}\n\n\t\t// add loading spinner to iframe container\n\t\tchangeCSS(loadingIcon, '');\n\t\tiframeContainer[appendEl](loadingIcon);\n\n\t\t// set iframe src to url\n\t\tiframeSiteVid.src = url;\n\n\t\tupdateIframeDimensions();\n\n\t\tsetTimeout(open, 9);\n\t}\n\n\tfunction updateIframeDimensions() {\n\t\tvar height;\n\t\tvar width;\n\n\t\t// handle height / width / aspect / max width for iframe\n\t\tvar windowHeight = window.innerHeight * 0.95;\n\t\tvar windowWidth = window.innerWidth * 0.95;\n\t\tvar windowAspect = windowHeight / windowWidth;\n\n\t\tvar ref = opts.dimensions || [1920, 1080];\n\t\tvar dimensionWidth = ref[0];\n\t\tvar dimensionHeight = ref[1];\n\n\t\tvar iframeAspect = dimensionHeight / dimensionWidth;\n\n\t\tif (iframeAspect > windowAspect) {\n\t\t\theight = Math.min(dimensionHeight, windowHeight);\n\t\t\twidth = height / iframeAspect;\n\t\t} else {\n\t\t\twidth = Math.min(dimensionWidth, windowWidth);\n\t\t\theight = width * iframeAspect;\n\t\t}\n\n\t\tiframeContainer.style.cssText += \"width:\" + width + \"px;height:\" + height + \"px;\";\n\t}\n\n\t// timeout to check video status while loading\n\tfunction checkMedia(errMsg) {\n\t\tif (~[1, 4].indexOf(displayElement.readyState)) {\n\t\t\topen();\n\t\t\t// short timeout to to make sure controls show in safari 11\n\t\t\tsetTimeout(function () {\n\t\t\t\tdisplayElement.play();\n\t\t\t}, 99);\n\t\t} else if (displayElement.error) {\n\t\t\topen(errMsg);\n\t\t} else {\n\t\t\tcheckMediaTimeout = setTimeout(checkMedia, 35, errMsg);\n\t\t}\n\t}\n\n\t// hide / show loading icon\n\tfunction toggleLoadingIcon(bool) {\n\t\t// don't show loading icon if noLoader is specified\n\t\tif (opts.noLoader) {\n\t\t\treturn\n\t\t}\n\t\t// bool is true if we want to show icon, false if we want to remove\n\t\t// change style to match trigger element dimensions if we want to show\n\t\tbool &&\n\t\t\tchangeCSS(\n\t\t\t\tloadingIcon,\n\t\t\t\t(\"top:\" + (el.offsetTop) + \"px;left:\" + (el.offsetLeft) + \"px;height:\" + (el.clientHeight) + \"px;width:\" + (el.clientWidth) + \"px\")\n\t\t\t);\n\t\t// add or remove loader from DOM\n\t\tel.parentElement[bool ? appendEl : removeEl](loadingIcon);\n\t\tisLoading = bool;\n\t}\n\n\t// hide & show caption\n\tfunction toggleCaption(captionContent) {\n\t\tif (captionContent) {\n\t\t\tcaptionText.innerHTML = captionContent;\n\t\t}\n\t\tchangeCSS(\n\t\t\tcaption,\n\t\t\t(\"opacity:\" + (captionContent ? \"1;pointer-events:auto\" : '0'))\n\t\t);\n\t}\n\n\tfunction addToImgCache(url) {\n\t\t!~imgCache.indexOf(url) && imgCache.push(url);\n\t}\n\n\t// animate open of image / video; display caption if needed\n\tfunction open(err) {\n\t\t// hide loading spinner\n\t\tisLoading && toggleLoadingIcon();\n\n\t\t// execute animationStart callback\n\t\tanimationStart && animationStart();\n\n\t\t// check if we have an error string instead of normal event\n\t\tif (typeof err === 'string') {\n\t\t\tremoveContainer();\n\t\t\treturn opts.onError\n\t\t\t\t? opts.onError()\n\t\t\t\t: alert((\"Error: The requested \" + err + \" could not be loaded.\"))\n\t\t}\n\n\t\t// if remote image is loaded, add url to imgCache array\n\t\tremoteImage && addToImgCache(imgSrc);\n\n\t\t// transform displayEl to match trigger el\n\t\tdisplayElement.style.cssText += getRect();\n\n\t\t// fade in container\n\t\tchangeCSS(container, \"opacity:1;pointer-events:auto\");\n\n\t\t// set animationEnd callback to run after animation ends (cleared if container closed)\n\t\tif (animationEnd) {\n\t\t\tanimationEnd = setTimeout(animationEnd, 410);\n\t\t}\n\n\t\tisOpen = true;\n\n\t\tgalleryOpen = !!galleryEls;\n\n\t\t// enlarge displayEl, fade in caption if hasCaption\n\t\tsetTimeout(function () {\n\t\t\tdisplayElement.style.cssText += 'transition:transform .35s;transform:none';\n\t\t\tcaptionContent && setTimeout(toggleCaption, 250, captionContent);\n\t\t}, 60);\n\t}\n\n\t// close active display element\n\tfunction close(e) {\n\t\tvar target = e ? e.target : container;\n\t\tvar clickEls = [\n\t\t\tcaption,\n\t\t\tcaptionHideButton,\n\t\t\tdisplayVideo,\n\t\t\tdisplayAudio,\n\t\t\tcaptionText,\n\t\t\tleftArrowBtn,\n\t\t\trightArrowBtn,\n\t\t\tloadingIcon ];\n\n\t\t// blur to hide close button focus style\n\t\ttarget.blur();\n\n\t\t// don't close if one of the clickEls was clicked or container is already closing\n\t\tif (isClosing || ~clickEls.indexOf(target)) {\n\t\t\treturn\n\t\t}\n\n\t\t// animate closing\n\t\tdisplayElement.style.cssText += getRect();\n\t\tchangeCSS(container, 'pointer-events:auto');\n\n\t\t// timeout to remove els from dom; use variable to avoid calling more than once\n\t\tsetTimeout(removeContainer, 350);\n\n\t\t// clear animationEnd timeout\n\t\tclearTimeout(animationEnd);\n\n\t\tisOpen = false;\n\t\tisClosing = true;\n\t}\n\n\t// remove container / display element from the DOM\n\tfunction removeContainer() {\n\t\t// clear src of displayElement (or iframe if display el is iframe container)\n\t\t// needs to be done before removing container in IE\n\t\tvar srcEl =\n\t\t\tdisplayElement === iframeContainer ? iframeSiteVid : displayElement;\n\t\tsrcEl.removeAttribute('src');\n\n\t\t// remove container from DOM & clear inline style\n\t\tdocument.body[removeEl](container);\n\t\tcontainer[removeEl](displayElement);\n\t\tchangeCSS(container, '');\n\t\tchangeCSS(displayElement, '');\n\n\t\t// remove caption\n\t\ttoggleCaption(false);\n\n\t\tif (galleryOpen) {\n\t\t\t// remove all gallery stuff\n\t\t\tvar images = container.querySelectorAll('img');\n\t\t\tfor (var i = 0; i < images.length; i++) {\n\t\t\t\tcontainer[removeEl](images[i]);\n\t\t\t}\n\t\t\tisLoading && container[removeEl](loadingIcon);\n\t\t\tcontainer[removeEl](galleryCounter);\n\t\t\tgalleryOpen = galleryEls = false;\n\t\t\tpreloadedImages = {};\n\t\t\tsupportsTouch || container[removeEl](rightArrowBtn);\n\t\t\tsupportsTouch || container[removeEl](leftArrowBtn);\n\t\t\t// in case displayimage changed, we need to update event listeners\n\t\t\tdisplayImage.onload = open;\n\t\t\tdisplayImage.onerror = open.bind(null, 'image');\n\t\t}\n\n\t\t// run close callback\n\t\topts.onClose && opts.onClose();\n\n\t\tisClosing = isLoading = false;\n\t}\n\n\t// style helper functions\n\tfunction changeCSS(ref, newStyle) {\n\t\tvar style = ref.style;\n\n\t\tstyle.cssText = newStyle;\n\t}\n\n\treturn BigPicture;\n\n}());\n","css":"","html":"","input":"css","output":["[4[47"]}