{"javascript":"/**\n * For usage, visit Chart.js docs https://www.chartjs.org/docs/latest/\n */\nconst barConfig = {\n  type: 'bar',\n  data: {\n    labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July'],\n    datasets: [\n      {\n        label: 'Shoes',\n        backgroundColor: '#0694a2',\n        // borderColor: window.chartColors.red,\n        borderWidth: 1,\n        data: [-3, 14, 52, 74, 33, 90, 70],\n      },\n      {\n        label: 'Bags',\n        backgroundColor: '#7e3af2',\n        // borderColor: window.chartColors.blue,\n        borderWidth: 1,\n        data: [66, 33, 43, 12, 54, 62, 84],\n      },\n    ],\n  },\n  options: {\n    responsive: true,\n    legend: {\n      display: false,\n    },\n  },\n}\n\nconst barsCtx = document.getElementById('bars')\nwindow.myBar = new Chart(barsCtx, barConfig)\n/**\n * For usage, visit Chart.js docs https://www.chartjs.org/docs/latest/\n */\nconst lineConfig = {\n  type: 'line',\n  data: {\n    labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July'],\n    datasets: [\n      {\n        label: 'Organic',\n        /**\n         * These colors come from Tailwind CSS palette\n         * https://tailwindcss.com/docs/customizing-colors/#default-color-palette\n         */\n        backgroundColor: '#0694a2',\n        borderColor: '#0694a2',\n        data: [43, 48, 40, 54, 67, 73, 70],\n        fill: false,\n      },\n      {\n        label: 'Paid',\n        fill: false,\n        /**\n         * These colors come from Tailwind CSS palette\n         * https://tailwindcss.com/docs/customizing-colors/#default-color-palette\n         */\n        backgroundColor: '#7e3af2',\n        borderColor: '#7e3af2',\n        data: [24, 50, 64, 74, 52, 51, 65],\n      },\n    ],\n  },\n  options: {\n    responsive: true,\n    /**\n     * Default legends are ugly and impossible to style.\n     * See examples in charts.html to add your own legends\n     *  */\n    legend: {\n      display: false,\n    },\n    tooltips: {\n      mode: 'index',\n      intersect: false,\n    },\n    hover: {\n      mode: 'nearest',\n      intersect: true,\n    },\n    scales: {\n      x: {\n        display: true,\n        scaleLabel: {\n          display: true,\n          labelString: 'Month',\n        },\n      },\n      y: {\n        display: true,\n        scaleLabel: {\n          display: true,\n          labelString: 'Value',\n        },\n      },\n    },\n  },\n}\n\n// change this to the id of your chart element in HMTL\nconst lineCtx = document.getElementById('line')\nwindow.myLine = new Chart(lineCtx, lineConfig)\n/**\n * For usage, visit Chart.js docs https://www.chartjs.org/docs/latest/\n */\nconst pieConfig = {\n  type: 'doughnut',\n  data: {\n    datasets: [\n      {\n        data: [33, 33, 33],\n        /**\n         * These colors come from Tailwind CSS palette\n         * https://tailwindcss.com/docs/customizing-colors/#default-color-palette\n         */\n        backgroundColor: ['#0694a2', '#1c64f2', '#7e3af2'],\n        label: 'Dataset 1',\n      },\n    ],\n    labels: ['Shoes', 'Shirts', 'Bags'],\n  },\n  options: {\n    responsive: true,\n    cutoutPercentage: 80,\n    /**\n     * Default legends are ugly and impossible to style.\n     * See examples in charts.html to add your own legends\n     *  */\n    legend: {\n      display: false,\n    },\n  },\n}\n\n// change this to the id of your chart element in HMTL\nconst pieCtx = document.getElementById('pie')\nwindow.myPie = new Chart(pieCtx, pieConfig)\n/**\n * Limit focus to focusable elements inside `element`\n * @param {HTMLElement} element - DOM element to focus trap inside\n * @return {Function} cleanup function\n */\nfunction focusTrap(element) {\n  const focusableElements = getFocusableElements(element)\n  const firstFocusableEl = focusableElements[0]\n  const lastFocusableEl = focusableElements[focusableElements.length - 1]\n\n  // Wait for the case the element was not yet rendered\n  setTimeout(() => firstFocusableEl.focus(), 50)\n\n  /**\n   * Get all focusable elements inside `element`\n   * @param {HTMLElement} element - DOM element to focus trap inside\n   * @return {HTMLElement[]} List of focusable elements\n   */\n  function getFocusableElements(element = document) {\n    return [\n      ...element.querySelectorAll(\n        'a, button, details, input, select, textarea, [tabindex]:not([tabindex=\"-1\"])'\n      ),\n    ].filter((e) => !e.hasAttribute('disabled'))\n  }\n\n  function handleKeyDown(e) {\n    const TAB = 9\n    const isTab = e.key.toLowerCase() === 'tab' || e.keyCode === TAB\n\n    if (!isTab) return\n\n    if (e.shiftKey) {\n      if (document.activeElement === firstFocusableEl) {\n        lastFocusableEl.focus()\n        e.preventDefault()\n      }\n    } else {\n      if (document.activeElement === lastFocusableEl) {\n        firstFocusableEl.focus()\n        e.preventDefault()\n      }\n    }\n  }\n\n  element.addEventListener('keydown', handleKeyDown)\n\n  return function cleanup() {\n    element.removeEventListener('keydown', handleKeyDown)\n  }\n}\nfunction data() {\n  function getThemeFromLocalStorage() {\n    // if user already changed the theme, use it\n    if (window.localStorage.getItem('dark')) {\n      return JSON.parse(window.localStorage.getItem('dark'))\n    }\n\n    // else return their preferences\n    return (\n      !!window.matchMedia &&\n      window.matchMedia('(prefers-color-scheme: dark)').matches\n    )\n  }\n\n  function setThemeToLocalStorage(value) {\n    window.localStorage.setItem('dark', value)\n  }\n\n  return {\n    dark: getThemeFromLocalStorage(),\n    toggleTheme() {\n      this.dark = !this.dark\n      setThemeToLocalStorage(this.dark)\n    },\n    isSideMenuOpen: false,\n    toggleSideMenu() {\n      this.isSideMenuOpen = !this.isSideMenuOpen\n    },\n    closeSideMenu() {\n      this.isSideMenuOpen = false\n    },\n    isNotificationsMenuOpen: false,\n    toggleNotificationsMenu() {\n      this.isNotificationsMenuOpen = !this.isNotificationsMenuOpen\n    },\n    closeNotificationsMenu() {\n      this.isNotificationsMenuOpen = false\n    },\n    isProfileMenuOpen: false,\n    toggleProfileMenu() {\n      this.isProfileMenuOpen = !this.isProfileMenuOpen\n    },\n    closeProfileMenu() {\n      this.isProfileMenuOpen = false\n    },\n    isPagesMenuOpen: false,\n    togglePagesMenu() {\n      this.isPagesMenuOpen = !this.isPagesMenuOpen\n    },\n    // Modal\n    isModalOpen: false,\n    trapCleanup: null,\n    openModal() {\n      this.isModalOpen = true\n      this.trapCleanup = focusTrap(document.querySelector('#modal'))\n    },\n    closeModal() {\n      this.isModalOpen = false\n      this.trapCleanup()\n    },\n  }\n}\n","css":"","html":"","input":"css","output":["[4[47"]}